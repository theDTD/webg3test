buildscript {
    repositories {
        mavenLocal()
        maven { url "https://repo.grails.org/grails/core" }
        maven { url "https://repo.grails.org/artifactory/core" }
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath "org.grails:grails-gradle-plugin:$grailsVersion"
        classpath "com.bertramlabs.plugins:asset-pipeline-gradle:2.13.1"
        classpath "com.bertramlabs.plugins:sass-asset-pipeline:2.9.1"
        classpath "org.grails.plugins:hibernate5:6.0.4"
        classpath "com.amazonaws:aws-java-sdk:1.10.44"
        classpath "net.saliman:gradle-cobertura-plugin:2.4.0"
        classpath "gradle.plugin.agorapulse.plugins:asset-pipeline-cdn:0.1.2"
    }
}

plugins {
    id "com.moowork.node" version "1.0.1"
}

node {
    version = '9.5.0'
    npmVersion = '5.6.0'
    download = true
}

version "0.1"
group "web.g3"

apply plugin:"eclipse"
apply plugin:"idea"
apply plugin:"war"
apply plugin:"org.grails.grails-web"
apply plugin:"org.grails.grails-gsp"
apply plugin:"asset-pipeline"
apply plugin:"net.saliman.cobertura"
apply plugin:"agorapulse.plugins.asset-pipeline-cdn"
// Uncomment below to enable unit test logging
//apply plugin:"java"
//
//test {
//    testLogging.showStandardStreams = true
//}

repositories {
    mavenLocal()
    maven { url "https://repo.grails.org/grails/core" }
    maven { url "https://repo.grails.org/grails/plugins" }
    maven { url "https://repo.grails.org/artifactory/core" }
    maven {
        url "s3://valore-grails-plugins/release"
        credentials(AwsCredentials) {
            def defaultCredentials = new com.amazonaws.auth.DefaultAWSCredentialsProviderChain().getCredentials()
            accessKey defaultCredentials.getAWSAccessKeyId()
            secretKey defaultCredentials.getAWSSecretKey()
        }
    }
}

dependencyManagement {
    imports {
        mavenBom "org.grails:grails-bom:$grailsVersion"
    }
    applyMavenExclusions false
}

dependencies {
    compile "org.grails.plugins:geoip:0.3.3"
    compile "org.springframework.boot:spring-boot-starter-logging"
    compile "org.springframework.boot:spring-boot-autoconfigure"
    compile "org.grails:grails-core"
    compile "org.springframework.boot:spring-boot-starter-actuator"
    compile "org.springframework.boot:spring-boot-starter-tomcat"
    compile "org.grails:grails-dependencies"
    compile "org.grails:grails-web-boot"
    compile "org.grails.plugins:cache"
    compile "org.grails.plugins:scaffolding"
    compile "org.grails.plugins:hibernate5"
    compile "org.hibernate:hibernate-core:5.1.2.Final"
    compile "org.hibernate:hibernate-ehcache:5.1.2.Final"
    compile "valore:valore-common-g3:0.17.64"
    compile "com.github.segmentio:analytics:1.0.7"
    compile "org.grails.plugins:quartz:2.0.13"
    compile "org.grails.plugins:cookie:2.0.5"
    compile "org.grails.plugins:newrelic:3.35.2"
    compile "org.grails.plugins:external-config:1.1.2"
    compile "org.grails.plugins:spring-security-core:3.1.1"
    compile "com.github.groovy-wslite:groovy-wslite:1.1.2"
    console "org.grails:grails-console"
    profile "org.grails.profiles:web"
    runtime "com.bertramlabs.plugins:asset-pipeline-grails:2.11.6"
    assets "com.bertramlabs.plugins:sass-asset-pipeline:2.13.2"
    runtime "com.h2database:h2"
    runtime "mysql:mysql-connector-java:6.0.6"
    testCompile "org.grails:grails-plugin-testing"
    testCompile "org.grails.plugins:geb"
    testRuntime "org.seleniumhq.selenium:selenium-htmlunit-driver:2.47.1"
    testRuntime "net.sourceforge.htmlunit:htmlunit:2.18"
}

bootRun {
    jvmArgs('-Dspring.output.ansi.enabled=always')
}

assets {
    minifyJs = true
    minifyCss = true
}

// Single provider
assetsCdn {
    provider = 's3'
    def defaultCredentials = new com.amazonaws.auth.DefaultAWSCredentialsProviderChain().getCredentials()
    accessKey = defaultCredentials.getAWSAccessKeyId()
    secretKey = defaultCredentials.getAWSSecretKey()
    region = 'us-east-1'
    directory = 'valore-static'
    expires = 365 // Expires in 1 year (value in days)
    storagePath = '/'
}

processResources.dependsOn(['npmInstall', 'npm_run_bundle'])
assetCompile.dependsOn(['npmInstall', 'npm_run_bundle'])

war.archiveName = 'vb.war'

cobertura {
    coverageFormats = [ 'xml' ]
}

grails { pathingJar = true }